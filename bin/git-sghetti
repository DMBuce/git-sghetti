#!/bin/bash

# prints the remote url
remote_url() {
	# figure out remote url for current branch
	upstream='@{push}'
	[[ -n $SGHETTI_UPSTREAM && $SGHETTI_UPSTREAM != push ]] && upstream='@{upstream}'
	IFS=/ read remote branch \
		<<< "$(git rev-parse --abbrev-ref "$upstream" 2>/dev/null)"
	url="$(git ls-remote --get-url "$remote")"

	# check if remote has a url
	if [[ -z "$url" ]]; then
		echo "Couldn't determine upstream url." >&2
		return 1
	fi

	echo "$url"
}

# parses url and sets scheme, flavor, proto, etc.
parse_url() {
	# parse args
	local url="$1"
	flavor=
	scheme=
	proto=
	host=
	user=
	dir=
	# figure out type, proto, user, host[:port], dir from url
	if [[ $url == /* ]]; then
		# /path/to/repo.git/
		scheme=path
		dir="$url"
		flavor=file
	elif [[ $url == file://* ]]; then
		# file:///path/to/repo.git/
		scheme=uri
		proto="${url%%://*}"
		dir="${url#*://}"
		flavor="$proto"
	elif [[ $url =~ ([a-z]+)://([^@/]+@)?([^/~]+)([/~].*) ]]; then
		# git://host.xz[:port]/path/to/repo.git/
		# git://host.xz[:port]/~[user]/path/to/repo.git/
		# http[s]://host.xz[:port]/path/to/repo.git/
		# ftp[s]://host.xz[:port]/path/to/repo.git/
		# ssh://[user@]host.xz[:port]/path/to/repo.git/
		# ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/
		scheme=uri
		proto="${BASH_REMATCH[1]}"
		user="${BASH_REMATCH[2]}"; user="${user%@}"
		host="${BASH_REMATCH[3]}"
		dir="${BASH_REMATCH[4]}"
		flavor="${proto%s}"
	elif [[ $url =~ ([^@/]+@)?([^:]+):(.*) ]]; then
		# [user@]host.xz:path/to/repo.git/
		# [user@]host.xz:/~[user]/path/to/repo.git/
		scheme=scp
		user="${BASH_REMATCH[1]}"; user="${user%@}"
		host="${BASH_REMATCH[2]}"
		dir="${BASH_REMATCH[3]}"
		flavor=ssh
	else
		echo "Couldn't parse url: $url" >&2
		return 1
	fi

	# use config to override flavor, user
	local sghetti rule var condition val
	local setvar value
	while IFS=' ' read -r sghetti rule var condition val; do
		if [[ $condition == equals && ${!var} == $val ]]; then
			# set var to val
			while IFS=' ' read -r setvar value; do
				declare -g "$setvar=$value"
			done < <( \
				git config --get-regexp "^sghetti\.$rule\.set-(flavor|user)$" \
				| sed "s/^sghetti\.$rule\.set-//"
			)
			break
		elif [[ $condition == matches && ${!var} =~ $val ]]; then
			while IFS=' ' read -r setvar value; do
				# substitue \1, \2, \3, etc.
				for i in {1..9}; do
					value="${value//\\$i/${BASH_REMATCH[$i]}}"
				done
				# set var to val
				declare -g "$setvar=$value"
			done < <( \
				git config --get-regexp "^sghetti\.$rule\.set-(flavor|user)$" \
				| sed "s/^sghetti\.$rule\.set-//"
			)
			break
		fi
	done < <( \
		var_re="(url|flavor|scheme|proto|host|user|dir)"
		git config --get-regexp "^sghetti\.rule[0-9]{3}\.$var_re-(matches|equals)$" \
		| sed 's/\./ /; s/\./ /; s/-/ /' \
		| LC_ALL=C sort
	)
}

# env vars
export confdir="${XDG_CONFIG_HOME:-$HOME/.config}/sghetti"
mkdir -p "$confdir"

# just set the url properties if this script was sourced
if [[ "${BASH_SOURCE[0]}" != "$0" ]]; then
	url="${SGHETTI_URL:-$(remote_url)}" || exit
	parse_url "$url" || exit
	return
fi

# run git-sghetti--foo if necessary
prog="${0##*/}"
if [[ $1 != /* && $1 != *:* ]] && command -v "$prog--$1" &>/dev/null; then
	#printf "%s\n" "$prog--$1" "${@:2}" >&2
	exec "$prog--$1" "${@:2}"
fi

# define some vars
prog="${0##*/}"
SUBDIRECTORY_OK=Yes
NONGIT_OK=Yes
OPTIONS_KEEPDASHDASH=
OPTIONS_STUCKLONG=
OPTIONS_SPEC="\
${prog/-/ } [url [...]]
${prog/-/ } <subcommand>

Print the properties (scheme, flavor, proto, user, host, and dir) of each url.
If no <url>s are provided, the upstream remote of the current branch is used.

If the first argument does not contain '/' or ':', interpet all arguments as a
git-sghetti subcommand to run instead of a url.

If this script is sourced, define the url properties as shell variables instead
of printing them.
--
"

# normalize options, set up shell functions, define $GIT_DIR, $GIT_OBJECT_DIRECTORY
. "$(git --exec-path)/git-sh-setup"

# use remote url if called with no args
if [[ -z "$*" || "$*" == '--' ]]; then
	url="$(remote_url)" || exit
	set -- "$url"
fi

# parse options
while (( $# )); do
	case "$1" in
		--)
			shift
			break
		;;
		-*)
			die "Unimplemented option (this is a bug): $1"
		;;
		*)
			break
		;;
	esac
	shift
done

# process each url
i=0
for url in "$@"; do
	# parse url
	parse_url "$url"

	# print each variable
	((i++)) && echo
	printf "%s\n" \
		"${url@A}" \
		"${flavor@A}" \
		"${scheme@A}" \
		"${proto@A}" \
		"${host@A}" \
		"${user@A}" \
		"${dir@A}"
done

