#!/bin/bash

# define some vars
prog="${0##*/}"
action="${prog#git-sghetti--}"
SUBDIRECTORY_OK=Yes
NONGIT_OK=
OPTIONS_KEEPDASHDASH=
OPTIONS_STUCKLONG=
OPTIONS_SPEC="\
${prog/-sghetti--/ sghetti } <subcommand>

SSH into the upstream repository of the current branch ('origin' by default) and
run \`git <subcommand>\`.
--
"

# slurp up args so git-sh-setup doesn't choke on them
args=("$@")
[[ "$*" != -h ]] && set --

# normalize options, set up shell functions, define $GIT_DIR, $GIT_OBJECT_DIRECTORY
. "$(git --exec-path)/git-sh-setup"

# reset args
set -- "${args[@]}"

# print help output if called with no args
if [[ -z "$*" || "$*" == '--' ]]; then
	usage
fi

# parse options
while (( $# )); do
	case "$1" in
		-h|--help)
			usage
		;;
		--)
			shift
			break
		;;
		-*)
			die "Unimplemented option (this is a bug): $1"
		;;
		*)
			break
		;;
	esac
	shift
done

# parse args
subcmd="$*"

# parse remote url
. git-sghetti

# make sure we have an ssh url
if [[ "$flavor" != ssh ]]; then
	die "Not an ssh url: $url"
fi

# determine ssh target
target="$host"
if [[ -n "$user" ]]; then
	target="$user@$host"
fi

# run subcommand from remote repo
set -x
ssh "$target" "mkdir -p $dir && cd $dir || exit; git $subcmd"

